import java.io.*;
import java.util.*;
public class Main {
    static final int N = 200002;
    static final long M = 998244353;
    static long[] c = new long[N];
    static long qp(long b) {
        long r = 1, e = M - 2;
        while(e > 0) {
            if((e & 1) == 1) r = (r * b) % M;
            b = (b * b) % M;
            e >>= 1;
        }
        return r;
    }
    static class Pair {
        long f, s;
        Pair(long f, long s) { this.f = f; this.s = s; }
    }
    public static void main(String[] args)throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(System.out);
        StringTokenizer st;
        c[1] = 1;
        for (int i = 2; i < N; i++) c[i] = qp(i);
        for (int i = 2; i < N; i++) {
            c[i] = (((c[i] * c[i-1]) % M) * (((long)i << 2) - 6)) % M;
            if(c[i] < 0) c[i] += M;
        }
        int T = Integer.parseInt(br.readLine());
        while(T-- > 0) {
            st = new StringTokenizer(br.readLine());
            long n = Long.parseLong(st.nextToken());
            int mVal = Integer.parseInt(st.nextToken());
            Pair[] aArr = new Pair[mVal + 1];
            aArr[0] = new Pair(1, n);
            int idx = 0;
            for (int i = 1; i <= mVal; i++) {
                st = new StringTokenizer(br.readLine());
                long u = Long.parseLong(st.nextToken());
                long v = Long.parseLong(st.nextToken());
                if(u != v) { idx++; aArr[idx] = new Pair(u, v); }
            }
            Arrays.sort(aArr, 1, idx + 1, new Comparator<Pair>() {
                public int compare(Pair x, Pair y) {
                    if(x.f != y.f) return Long.compare(x.f, y.f);
                    return -Long.compare(x.s, y.s);
                }
            });
            ArrayList<Integer> vList = new ArrayList<>();
            vList.add(0);
            int[] h = new int[idx + 1];
            h[0] = (int)(n - 1);
            for (int i = 1; i <= idx; i++) {
                while(!vList.isEmpty() && aArr[vList.get(vList.size()-1)].s < aArr[i].f)
                    vList.remove(vList.size()-1);
                int j = vList.get(vList.size()-1);
                int diff = (int)(aArr[i].s - aArr[i].f);
                h[j] -= diff;
                h[i] = diff;
                vList.add(i);
            }
            long res = 1;
            for (int i = 0; i <= idx; i++) res = (res * c[h[i] + 1]) % M;
            out.println(res);
        }
        out.flush();
    }
}
