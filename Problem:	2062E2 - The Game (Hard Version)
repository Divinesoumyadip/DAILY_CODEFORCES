#include<bits/stdc++.h>
using namespace std;
const int N=5e5+2;
vector<int>e[N];
int dfn[N],nfd[N],low[N],id,n,m;
void dfs(int u){
	nfd[dfn[u]=++id]=u;
	for(int v:e[u])erase(e[v],u),dfs(v);
	low[u]=id;
}
int main()
{
	ios::sync_with_stdio(0);cin.tie(0);
	cout<<fixed<<setprecision(15);
	int T;cin>>T;
	while(T--){
		cin>>n;
		vector w(n,vector<int>());
		vector<int>c(n+1),ans;
		for(int i=1;i<=n;i++){
		    int j;
			e[i].clear();id=0;
			cin>>j;
			w[j-1].push_back(i);
		}
		for(int i=1;i<n;i++){
			int u,v;
			cin>>u>>v;
			e[u].push_back(v);
			e[v].push_back(u);
		}
		dfs(1);
		int l=n+1,r=0;
		set<int>s;
		for(int i=n-1;i>=0;i--){
			if(s.size()){
				for(int u:w[i]){
					int mx=0;
					for(int j=dfn[u]-1;j;j-=j&-j)mx=max(mx,c[j]);
					if((*s.begin()<dfn[u]||*s.rbegin()>low[u])&&mx<=low[u]&&dfn[u]<=l&&low[u]>=r)ans.push_back(u);
				}
				for(int u:w[i]){
					int mn=*s.begin(),mx=*s.rbegin();
					int L=dfn[u],R=low[u];
					if(mn>=L&&mx<=R)continue;
					if(mn>=L&&mn<=R)mn=*s.upper_bound(R);
					if(mx>=L&&mx<=R)mx=*prev(s.lower_bound(L));
					auto fun=[&](int x,int y){
						if(x>y)swap(x,y);
						l=min(l,y),r=max(r,x);
						for(int j=x;j<=n;j+=j&-j)c[j]=max(c[j],y);
					};
					fun(mn,dfn[u]);
					fun(mx,dfn[u]);
				}
			}
			for(int u:w[i])s.insert(dfn[u]);
		}
		sort(ans.begin(),ans.end());
		cout<<ans.size();
		for(int x:ans)cout<<' '<<x;
		cout<<'\n';
	}
}
